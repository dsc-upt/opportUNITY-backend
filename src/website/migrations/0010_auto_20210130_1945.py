# Generated by Django 3.1.5 on 2021-01-30 17:45

import common.utils
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('administration', '0003_auto_20210130_1945'),
        ('website', '0009_auto_20210126_2253'),
    ]

    operations = [
        migrations.AlterField(
            model_name='article',
            name='description',
            field=models.CharField(max_length=2000, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='article',
            name='image',
            field=models.ImageField(blank=True, default=None, upload_to=common.utils.get_upload_path, verbose_name='image'),
        ),
        migrations.AlterField(
            model_name='article',
            name='name',
            field=models.CharField(max_length=100, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='email',
            field=models.EmailField(max_length=200, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='message',
            field=models.TextField(max_length=2000, verbose_name='message'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='name',
            field=models.CharField(max_length=200, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='subject',
            field=models.CharField(max_length=300, verbose_name='subject'),
        ),
        migrations.AlterField(
            model_name='faq',
            name='answer',
            field=models.TextField(max_length=1000, verbose_name='answer'),
        ),
        migrations.AlterField(
            model_name='faq',
            name='question',
            field=models.CharField(max_length=300, verbose_name='question'),
        ),
        migrations.AlterField(
            model_name='menuitem',
            name='link',
            field=models.CharField(max_length=1000, verbose_name='link'),
        ),
        migrations.AlterField(
            model_name='menuitem',
            name='name',
            field=models.CharField(max_length=200, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='menuitem',
            name='order_index',
            field=models.PositiveIntegerField(db_index=True, default=0, verbose_name='order'),
        ),
        migrations.AlterField(
            model_name='menuitem',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='website.menuitem', verbose_name='parent'),
        ),
        migrations.AlterField(
            model_name='menuitem',
            name='type',
            field=models.CharField(choices=[('ExternalLink', 'Link outside our domain (ex: google.com/milk)'), ('InternalLink', 'Link inside our domain (ex: /contact)')], default='InternalLink', max_length=20, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='newsletter',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='newsletters', related_query_name='newsletter', to='administration.Category', verbose_name='categories'),
        ),
        migrations.AlterField(
            model_name='newsletter',
            name='email',
            field=models.EmailField(max_length=250, unique=True, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='newsletter',
            name='other',
            field=models.CharField(blank=True, help_text='Other categories that are not listed above', max_length=500, verbose_name='other'),
        ),
        migrations.AlterField(
            model_name='partner',
            name='logo',
            field=models.ImageField(blank=True, default=None, upload_to=common.utils.get_upload_path, verbose_name='logo'),
        ),
        migrations.AlterField(
            model_name='partner',
            name='name',
            field=models.CharField(max_length=100, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='partner',
            name='website',
            field=models.URLField(blank=True, default=None, verbose_name='website'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='description',
            field=models.TextField(blank=True, default='', max_length=250, verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='image',
            field=models.ImageField(blank=True, default=None, upload_to=common.utils.get_upload_path, verbose_name='image'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='type',
            field=models.CharField(choices=[('TEXT', 'Text'), ('IMAGE', 'Image')], default='TEXT', max_length=5, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='setting',
            name='value',
            field=models.TextField(default='', max_length=300, verbose_name='value'),
        ),
        migrations.AlterField(
            model_name='wanttohelp',
            name='description',
            field=models.TextField(verbose_name='description'),
        ),
        migrations.AlterField(
            model_name='wanttohelp',
            name='email',
            field=models.EmailField(max_length=255, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='wanttohelp',
            name='name',
            field=models.CharField(max_length=225, verbose_name='name'),
        ),
        migrations.AddConstraint(
            model_name='menuitem',
            constraint=models.CheckConstraint(check=models.Q(type__in=['ExternalLink', 'InternalLink']), name='menuitem_type_valid'),
        ),
        migrations.AddConstraint(
            model_name='setting',
            constraint=models.CheckConstraint(check=models.Q(type__in=['TEXT', 'IMAGE']), name='setting_type_valid'),
        ),
    ]
